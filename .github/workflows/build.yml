# GitHub Action for Laravel with MySQL and Redis
name: API
on: [push, pull_request]
jobs:
  laravel:
    name: Laravel (PHP ${{ matrix.php-versions }})
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: 'secret'
          MYSQL_DATABASE: 'content_information_test'
          MYSQL_USER: 'homestead'
          MYSQL_PASSWORD: ''
        ports:
          - 33306:3306/tcp
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379/tcp
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    strategy:
      fail-fast: false
      matrix:
        php-versions: ['7.4']
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2 #https://github.com/shivammathur/setup-php
        with:
          php-version: ${{ matrix.php-versions }}
          extensions: mbstring, dom, fileinfo, mysql
          coverage: xdebug #optional
      - name: Start mysql service
        run: sudo /etc/init.d/mysql start
      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"
      - name: Cache composer dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          # Use composer.json for key, if composer.lock is not committed.
          # key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-
      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
      - name: Copy Env File
        run: cp .env.testing .env
      - name: Setup database user
        run: mysql -u runner -e 'CREATE USER 'worker'@'localhost' IDENTIFIED BY 'secret';'
      - name: Flush privileges
        run: mysql -u worker --password=secret -e 'FLUSH PRIVILEGES;'
      - name: Create testing database
        run: mysql -u worker --password=secret -e 'CREATE DATABASE IF NOT EXISTS content_information_test;'
      - name: Migrate Test Database
        run: php artisan migrate --env=testing --seed --force
        env:
          DB_PORT: 33306:3306/tcp
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - name: Change Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
      - name: Static Analysis via PHPStan
        run: ./vendor/bin/phpstan analyse app/BusinessDomain app/DataDomain app/Infrastructure tests/Unit -c phpstan.neon
      - name: Execute tests (Unit and Feature tests) via PHPUnit
        run: vendor/bin/phpunit
        env:
          DB_PORT: 33306:3306/tcp
          REDIS_PORT: ${{ job.services.redis.ports['6379'] }}
      - name: Run code style fixer on app/
        run: php tools/php-cs-fixer/vendor/bin/php-cs-fixer fix app/
      - name: Run code style fixer on tests/
        run: php tools/php-cs-fixer/vendor/bin/php-cs-fixer fix tests/
      - name: Run code style fixer on database/
        run: php tools/php-cs-fixer/vendor/bin/php-cs-fixer fix database/
      - name: Run code style fixer on routes/
        run: php tools/php-cs-fixer/vendor/bin/php-cs-fixer fix routes/
  # This piece is optional (continuous deployment).
  #deploy:
    #runs-on: ubuntu-latest
    #needs: laravel
    # This will deploy your code to your server if it is merged into master.
    # You can change the branch to a common name like develop or staging.
    #if: github.ref == 'refs/heads/master'
    #steps:
      #- name: Send to Ploi # You can set this up with Forge, AWS, Vapor, Vercel etc.
        #run: curl --location --request POST ${{ secrets.PLOI_DEV_URI }} # Add a secret to your repo
